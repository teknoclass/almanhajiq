#!/bin/bash
# Laravel Security Pre-commit Hook
# This script runs security checks and validations before allowing commits

# Exit on error
set -e

echo "üîí Running Laravel Security Pre-commit Hook..."

# 1. Check for potentially dangerous PHP functions
echo "üîç Checking for dangerous PHP functions..."
DANGEROUS_FUNCTIONS=(
  "shell_exec"
  "exec"
  "passthru"
  "system"
  "proc_open"
  "popen"
  "pcntl_exec"
  "eval"
  "assert"
  "create_function"
  "include_once"
  "require_once"
  "exit"
  "die"
)

DANGEROUS_DB_COMMANDS=(
  "DROP DATABASE"
  "DROP TABLE"
  "TRUNCATE TABLE"
  "DELETE FROM"
)

# Get staged PHP files
STAGED_PHP_FILES=$(git diff --cached --name-only --diff-filter=ACMR | grep "\.php$" || echo "")

if [ -n "$STAGED_PHP_FILES" ]; then
  # Check for dangerous functions in staged PHP files
  for FUNC in "${DANGEROUS_FUNCTIONS[@]}"; do
    MATCHES=$(grep -n "$FUNC" $STAGED_PHP_FILES 2>/dev/null || echo "")
    if [ -n "$MATCHES" ]; then
      echo "‚ö†Ô∏è  WARNING: Potentially dangerous PHP function '$FUNC' detected:"
      echo "$MATCHES"
      echo ""
      echo "Is this intentional? If yes, use 'git commit --no-verify' to bypass this check."
      echo "Otherwise, please remove or refactor the code using this function."
      exit 1
    fi
  done

  # Check for dangerous database commands
  for CMD in "${DANGEROUS_DB_COMMANDS[@]}"; do
    MATCHES=$(grep -n "$CMD" $STAGED_PHP_FILES 2>/dev/null || echo "")
    if [ -n "$MATCHES" ]; then
      echo "‚ö†Ô∏è  WARNING: Potentially dangerous database command '$CMD' detected:"
      echo "$MATCHES"
      echo ""
      echo "Is this intentional? If yes, use 'git commit --no-verify' to bypass this check."
      echo "Otherwise, please remove or refactor the code using this command."
      exit 1
    fi
  done
fi

# 2. Check for file deletion code
echo "üîç Checking for file deletion code..."
FILE_DELETION_FUNCTIONS=(
  "unlink"
  "rmdir"
  "File::delete"
  "deleteDirectory"
  "Storage::delete"
)

for FUNC in "${FILE_DELETION_FUNCTIONS[@]}"; do
  MATCHES=$(grep -n "$FUNC" $STAGED_PHP_FILES 2>/dev/null || echo "")
  if [ -n "$MATCHES" ]; then
    echo "‚ö†Ô∏è  WARNING: File deletion function '$FUNC' detected:"
    echo "$MATCHES"
    echo ""
    echo "Is this intentional? If yes, use 'git commit --no-verify' to bypass this check."
    echo "Otherwise, please review this code carefully."
    exit 1
  fi
done

# 3. Validate PHP syntax
echo "üîç Validating PHP syntax..."
for FILE in $STAGED_PHP_FILES; do
  php -l "$FILE" > /dev/null || exit 1
done

# 4. Run PHP CS Fixer
if command -v ./vendor/bin/php-cs-fixer &> /dev/null; then
  echo "üîç Running PHP CS Fixer..."
  ./vendor/bin/php-cs-fixer fix --dry-run --using-cache=no --verbose
fi

# 5. Run PHPStan
if command -v ./vendor/bin/phpstan &> /dev/null; then
  echo "üîç Running PHPStan..."
  ./vendor/bin/phpstan analyse --no-progress --level=5
fi

# 6. Run Laravel Pint
if command -v ./vendor/bin/pint &> /dev/null; then
  echo "üîç Running Laravel Pint..."
  ./vendor/bin/pint --test
fi

# 7. Check for secrets/credentials in code
echo "üîç Checking for secrets or credentials in code..."
SECRETS_PATTERNS=(
  "password[\s]*=[\s]*['\"][^'\"]+['\"]"
  "api[\s]*key[\s]*=[\s]*['\"][^'\"]+['\"]"
  "secret[\s]*=[\s]*['\"][^'\"]+['\"]"
  "token[\s]*=[\s]*['\"][^'\"]+['\"]"
  "-----BEGIN PRIVATE KEY-----"
  "-----BEGIN RSA PRIVATE KEY-----"
  "AUTH_[A-Z0-9_]*=.+"
)

for PATTERN in "${SECRETS_PATTERNS[@]}"; do
  MATCHES=$(grep -n -E "$PATTERN" $STAGED_PHP_FILES 2>/dev/null || echo "")
  if [ -n "$MATCHES" ]; then
    echo "‚ö†Ô∏è  WARNING: Possible credentials or secrets found:"
    echo "$MATCHES"
    echo ""
    echo "Please remove sensitive information from the code and use environment variables instead."
    exit 1
  fi
done

# 8. Check for .env file modifications
ENV_FILE=$(git diff --cached --name-only | grep ".env" || echo "")
if [ -n "$ENV_FILE" ]; then
  echo "‚ö†Ô∏è  WARNING: Attempting to commit .env file changes."
  echo "This file should not be tracked in version control."
  echo "Please add this file to .gitignore and run 'git rm --cached .env'"
  exit 1
fi

# 9. Check for dependency vulnerabilities
if command -v composer &> /dev/null; then
  echo "üîç Checking for dependency vulnerabilities..."
  composer audit || echo "‚ö†Ô∏è  WARNING: Security vulnerabilities found in dependencies."
fi

# 10. Check for scheduler tasks
echo "üîç Checking for potentially harmful scheduler tasks..."
SCHEDULER_FILE="app/Console/Kernel.php"
if [ -f "$SCHEDULER_FILE" ] && git diff --cached --name-only | grep -q "$SCHEDULER_FILE"; then
  MATCHES=$(grep -n "DB::statement\|Artisan::call" "$SCHEDULER_FILE" 2>/dev/null || echo "")
  if [ -n "$MATCHES" ]; then
    echo "‚ö†Ô∏è  WARNING: Potentially dangerous scheduler tasks detected:"
    echo "$MATCHES"
    echo ""
    echo "Please review these tasks carefully."
    exit 1
  fi
fi

echo "‚úÖ All security checks passed!"
exit 0 